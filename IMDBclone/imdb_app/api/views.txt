from imdb_app.models import Movie
from rest_framework.response import Response
from rest_framework.decorators import api_view
from rest_framework.views import APIView

#In REST framework, we have to use @api_view decorator to define the function based views
# @api_view(['GET', 'POST'])
# def movie_list(request):
#     ## GET request
#     if request.method == 'GET':
#         movie = Movie.objects.all()
#         #when we have multiple objects we need to define many=True in serializer.
#         serializer = MovieSerializer(movie, many=True)
#         return Response(serializer.data)  
#     else:
#         ## POST request
#         serializer = MovieSerializer(data=request.data)
#         if serializer.is_valid():
#             serializer.save()
#             return Response(serializer.data, status=201)
#         return Response(serializer.errors, status=400)

# @api_view(['GET', 'PUT', 'DELETE'])
# def movie_detail(request, movie_id):
#     if request.method == 'GET':
#         try:
#             movie = Movie.objects.get(id=movie_id)
#         except Movie.DoesNotExist:
#             return Response(status=404)
#         serializer = MovieSerializer(movie)
#         return Response(serializer.data) 
    
#     ## PUT request
#     ## PUT request is used to update the existing object.
#     if request.method == 'PUT':
#         movie = Movie.objects.get(id=movie_id)
#         serializer = MovieSerializer(movie, data=request.data)
#         if serializer.is_valid():
#             serializer.save()
#             return Response(serializer.data, status=201)
#         return Response(serializer.errors, status=400)
    
#     ## DELETE request
#     ## DELETE request is used to delete the existing object.
#     if request.method == 'DELETE':
#         movie = Movie.objects.get(id=movie_id)
#         movie.delete()
#         return Response(status=204)


#Class based views
#In REST framework, we have to use APIView class to define the class based views
# class MovieListAV(APIView):
#     def get(self, reques):
#         movie = Movie.objects.all()
#         serializer = MovieSerializer(movie, many=True)
#         return Response(serializer.data)
    
#     def post(self, request):
#         serializer = MovieSerializer(data=request.data)
#         if serializer.is_valid():
#             serializer.save()
#             return Response(serializer.data, status=201)
#         return Response(serializer.errors, status=400)

# class MovieDetailAV(APIView):
#     def get(self, request, movie_id):
#         try:
#             movie = Movie.objects.get(id=movie_id)
#         except Movie.DoesNotExist:
#             return Response(status=404)
#         serializer = MovieSerializer(movie)
#         return Response(serializer.data)
    
#     def put(self, request, movie_id):
#         movie = Movie.objects.get(id=movie_id)
#         serializer = MovieSerializer(movie, data=request.data)
#         if serializer.is_valid():
#             serializer.save()
#             return Response(serializer.data, status=201)
#         return Response(serializer.errors, status=400)
    
#     def delete(self, request, movie_id):
#         movie = Movie.objects.get(id=movie_id)
#         movie.delete()
#         return Response(status=204)